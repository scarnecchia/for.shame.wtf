/**
 * creates an Uint8Array of the requested size, with the contents zeroed
 */
export declare const alloc: (size: number) => Uint8Array;
/**
 * creates an Uint8Array of the requested size, where the contents may not be
 * zeroed out. only use if you're certain that the contents will be overwritten
 */
export declare const allocUnsafe: (size: number) => Uint8Array;
/**
 * compares two Uint8Array buffers
 */
export declare const compare: (a: Uint8Array, b: Uint8Array) => number;
/**
 * checks if the two Uint8Array buffers are equal
 */
export declare const equals: (a: Uint8Array, b: Uint8Array) => boolean;
/**
 * checks if the two Uint8Array buffers are equal, timing-safe version
 */
export declare const timingSafeEquals: (a: Uint8Array, b: Uint8Array) => boolean;
/**
 * concatenates multiple Uint8Array buffers into one
 */
export declare const concat: (arrays: Uint8Array[], size?: number) => Uint8Array;
/**
 * encodes a UTF-8 string into the buffer
 */
export declare const encodeUtf8Into: (to: Uint8Array, str: string, offset?: number, length?: number) => number;
/**
 * decodes a UTF-8 string from a buffer
 */
export declare const decodeUtf8From: (from: Uint8Array, offset?: number, length?: number) => string;
/**
 * get a SHA-256 digest of this buffer
 */
export declare const toSha256: (buffer: Uint8Array) => Promise<Uint8Array>;
